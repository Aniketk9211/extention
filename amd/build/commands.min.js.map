{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_extention plugin.\n *\n * @module      plugintype_pluginname/commands\n * @copyright   2024 Aniket Kumar <aniketkj9211@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { getButtonImage } from \"editor_tiny/utils\";\n// import {get_string as getString} from 'core/str';\n// import Config from \"core/config\";\nimport { component, icon, buttonName } from \"./common\";\nimport { init } from \"./chem\";\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\n\n// const handleAction = (editor) => {\n//   // TODO Handle the action.\n//   document.addEventListener('DOMContentLoaded', function () {\n//     init()\n//   });\n// };\n\nconst handleAction = () => {\n  if (document.readyState === 'complete') {\n      // If the document is already completely loaded, call init directly.\n      init();\n  } else {\n      // Otherwise, wait for the DOMContentLoaded event.\n      document.addEventListener('DOMContentLoaded', init);\n  }\n};\n\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async () => {\n  const buttonImage = await getButtonImage(\"icon\", component);\n\n  return (editor) => {\n    // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n    editor.ui.registry.addIcon(icon, buttonImage.html);\n\n    // Add a button to the toolbar\n    editor.ui.registry.addButton(buttonName, {\n      tooltip: buttonName,\n      icon: icon,\n      onAction: () => handleAction(editor),\n    });\n\n    // Add an item to the menubar\n    editor.ui.registry.addMenuItem(buttonName, {\n      icon,\n      text: buttonName,\n      context: \"tools\",\n      onAction: () => handleAction(editor),\n    });\n  };\n};\n"],"names":["handleAction","document","readyState","addEventListener","init","async","buttonImage","component","editor","ui","registry","addIcon","icon","html","addButton","buttonName","tooltip","onAction","addMenuItem","text","context"],"mappings":";;;;;;;;MAyCMA,aAAe,KACS,aAAxBC,SAASC,4BAKTD,SAASE,iBAAiB,mBAAoBC,+BAa5BC,gBAChBC,kBAAoB,yBAAe,OAAQC,0BAEzCC,SAENA,OAAOC,GAAGC,SAASC,QAAQC,aAAMN,YAAYO,MAG7CL,OAAOC,GAAGC,SAASI,UAAUC,mBAAY,CACvCC,QAASD,mBACTH,KAAMA,aACNK,SAAU,IAAMjB,iBAIlBQ,OAAOC,GAAGC,SAASQ,YAAYH,mBAAY,CACzCH,KAAAA,aACAO,KAAMJ,mBACNK,QAAS,QACTH,SAAU,IAAMjB"}