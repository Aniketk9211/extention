{"version":3,"file":"chem.min.js","sources":["../src/chem.js"],"sourcesContent":["// Import necessary Moodle frontend modules\n// import { get_string as getString } from \"core/str\";\n// import Templates from \"core/templates\";\n// import { exception as displayException } from \"core/notification\";\nimport Modal from \"core/modal\";\nimport Config from \"core/config\";\n\n/**\n * Initializes and displays a modal.\n */\n\nasync function init() {\n  try {\n    // const title = await getString('buttonNameTitle', 'tiny_keteditor');\n    const title = \"ChemDoodle Sketcher\";\n    const modal = await Modal.create({\n      title: title,\n      show: true,\n      removeOnClose: true,\n    });\n\n    // ChemDoodle container HTML\n    const chemDoodleHtml = `\n            <div id=\"chemdoodle-sketcher\" style=\"width:800px; height:400px;\">Moodle Skether Place</div>\n        `;\n\n    // Append the ChemDoodle container to the modal's body\n    modal.setBody(chemDoodleHtml);\n\n    // Dynamically load ChemDoodle scripts and styles\n    await loadChemDoodleComponents();\n\n    // Initialize the ChemDoodle sketcher after the modal is displayed\n    modal.getRoot().on(\"shown\", () => {\n      initializeChemDoodle();\n    });\n\n    modal.show();\n  } catch (error) {\n    console.error(\"Error displaying modal:\", error);\n  }\n}\n\nasync function initializeChemDoodle() {\n  const sketcher = new ChemDoodle.SketcherCanvas(\n    \"chemdoodle-sketcher\",\n    800,\n    400,\n    {\n      useServices: false,\n      oneMolecule: true,\n      isMobile: false,\n    }\n  );\n  // sketcher.resize();\n  sketcher.repaint();\n  console.log(\"ChemDoodle initialized.\");\n}\n\nfunction loadScript(url) {\n  return new Promise((resolve, reject) => {\n    // Check if the script is already loaded\n    if (document.querySelector(`script[src=\"${url}\"]`)) {\n      console.log(`Script already loaded: ${url}`);\n      resolve();\n      return;\n    }\n\n    // If not loaded, create a new script element\n    var script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onload = () => {\n      console.log(`Successfully loaded: ${url}`);\n      resolve();\n    };\n    script.onerror = () => {\n      console.error(`Failed to load script: ${url}`);\n      reject(new Error(`Failed to load script: ${url}`));\n    };\n    // document.body.appendChild(script);\n  });\n}\n\nfunction loadCSS(url) {\n  return new Promise((resolve, reject) => {\n    // Check if the CSS is already loaded\n    if (document.querySelector(`link[href=\"${url}\"]`)) {\n      console.log(`Stylesheet already loaded: ${url}`);\n      resolve();\n      return;\n    }\n    // If not loaded, create a new link element\n    var link = document.createElement(\"link\");\n    link.rel = \"stylesheet\";\n    link.href = url;\n    link.type = \"text/css\";\n    link.onload = () => {\n      console.log(`Successfully loaded: ${url}`);\n      resolve();\n    };\n    link.onerror = () => {\n      console.error(`Failed to load CSS: ${url}`);\n      reject(new Error(`Failed to load CSS: ${url}`));\n    };\n    // document.head.appendChild(link);\n  });\n}\n\nasync function loadChemDoodleComponents() {\n  try {\n    const baseUrl = `${Config.wwwroot}/lib/editor/tiny/plugins/extention/ChemDoodleWeb/install/`;\n\n    // Load core ChemDoodle Web components\n    await loadCSS(`${baseUrl}ChemDoodleWeb.css`);\n    await loadScript(`${baseUrl}ChemDoodleWeb.js`);\n\n    // Load additional UI components\n    await loadCSS(`${baseUrl}uis/jquery-ui-1.11.4.css`);\n    await loadScript(`${baseUrl}uis/ChemDoodleWeb-uis.js`);\n\n    console.log(\"All ChemDoodle components loaded successfully\");\n  } catch (error) {\n    console.error(\"Failed to load ChemDoodle components:\", error);\n  }\n}\n\nexport { init };\n"],"names":["loadScript","url","Promise","resolve","reject","document","querySelector","console","log","script","createElement","type","src","onload","onerror","error","Error","loadCSS","link","rel","href","title","modal","Modal","create","show","removeOnClose","chemDoodleHtml","setBody","baseUrl","Config","wwwroot","loadChemDoodleComponents","getRoot","on","ChemDoodle","SketcherCanvas","useServices","oneMolecule","isMobile","repaint","initializeChemDoodle"],"mappings":"kMA2DSA,WAAWC,YACX,IAAIC,SAAQ,CAACC,QAASC,aAEvBC,SAASC,cAAe,eAAcL,gBACxCM,QAAQC,IAAK,0BAAyBP,YACtCE,cAKEM,OAASJ,SAASK,cAAc,UACpCD,OAAOE,KAAO,kBACdF,OAAOG,IAAMX,IACbQ,OAAOI,OAAS,KACdN,QAAQC,IAAK,wBAAuBP,OACpCE,WAEFM,OAAOK,QAAU,KACfP,QAAQQ,MAAO,0BAAyBd,OACxCG,OAAO,IAAIY,MAAO,0BAAyBf,qBAMxCgB,QAAQhB,YACR,IAAIC,SAAQ,CAACC,QAASC,aAEvBC,SAASC,cAAe,cAAaL,gBACvCM,QAAQC,IAAK,8BAA6BP,YAC1CE,cAIEe,KAAOb,SAASK,cAAc,QAClCQ,KAAKC,IAAM,aACXD,KAAKE,KAAOnB,IACZiB,KAAKP,KAAO,WACZO,KAAKL,OAAS,KACZN,QAAQC,IAAK,wBAAuBP,OACpCE,WAEFe,KAAKJ,QAAU,KACbP,QAAQQ,MAAO,uBAAsBd,OACrCG,OAAO,IAAIY,MAAO,uBAAsBf,6GAzFpCoB,MAAQ,sBACRC,YAAcC,eAAMC,OAAO,CAC/BH,MAAOA,MACPI,MAAM,EACNC,eAAe,IAIXC,eAAkB,sHAKxBL,MAAMM,QAAQD,iDAoFRE,QAAW,GAAEC,gBAAOC,yEAGpBd,QAAS,GAAEY,kCACX7B,WAAY,GAAE6B,iCAGdZ,QAAS,GAAEY,yCACX7B,WAAY,GAAE6B,mCAEpBtB,QAAQC,IAAI,iDACZ,MAAOO,OACPR,QAAQQ,MAAM,wCAAyCA,QA7FjDiB,GAGNV,MAAMW,UAAUC,GAAG,SAAS,uBAWb,IAAIC,WAAWC,eAC9B,sBACA,IACA,IACA,CACEC,aAAa,EACbC,aAAa,EACbC,UAAU,IAILC,UACTjC,QAAQC,IAAI,2BAtBRiC,MAGFnB,MAAMG,OACN,MAAOV,OACPR,QAAQQ,MAAM,0BAA2BA"}